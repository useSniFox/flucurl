// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/flucurl.h`.
///
/// Regenerate bindings with `dart run ffigen --config ffigen.yaml`.
///
class FlucurlBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  FlucurlBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  FlucurlBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void init() {
    return _init();
  }

  late final _initPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('init');
  late final _init = _initPtr.asFunction<void Function()>();

  void sendRequest(
    ffi.Pointer<Request> request,
    RequestCallback callback,
  ) {
    return _sendRequest(
      request,
      callback,
    );
  }

  late final _sendRequestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Request>, RequestCallback)>>('sendRequest');
  late final _sendRequest = _sendRequestPtr
      .asFunction<void Function(ffi.Pointer<Request>, RequestCallback)>();
}

final class Field extends ffi.Struct {
  external ffi.Pointer<ffi.Char> key;

  external ffi.Pointer<ffi.Char> value;
}

final class Request extends ffi.Struct {
  external ffi.Pointer<ffi.Char> url;

  external ffi.Pointer<ffi.Char> method;

  external ffi.Pointer<ffi.Char> data;

  @ffi.Int()
  external int contentLength;

  external ffi.Pointer<Field> header;

  @ffi.Int()
  external int headerLength;
}

final class Response extends ffi.Struct {
  external ffi.Pointer<ffi.Char> url;

  external ffi.Pointer<ffi.Char> method;

  external ffi.Pointer<ffi.Char> data;

  @ffi.Int()
  external int contentLength;

  external ffi.Pointer<Field> header;

  @ffi.Int()
  external int headerLength;
}

typedef RequestCallback
    = ffi.Pointer<ffi.NativeFunction<RequestCallbackFunction>>;
typedef RequestCallbackFunction = ffi.Void Function(
    ffi.Pointer<Request>, ffi.Pointer<Response>);
typedef DartRequestCallbackFunction = void Function(
    ffi.Pointer<Request>, ffi.Pointer<Response>);
